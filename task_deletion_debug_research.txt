TASK DELETION BUG - COMPREHENSIVE RESEARCH DOCUMENT
==================================================

PROBLEM DESCRIPTION:
--------------------
When deleting a task via the context menu in the Tasks page:
1. Task disappears from the UI immediately (optimistic deletion works)
2. Task is NOT deleted from Google Tasks
3. When the app is refreshed, the task reappears
4. Error in console: "Failed to get or refresh tokens: Gmail authentication failed: No refresh token available for account"

SYMPTOMS FROM CONSOLE LOG:
--------------------------
1. The deletion flow starts correctly:
   - Task is found with correct IDs
   - Local deletion happens
   - Google deletion is attempted

2. The error occurs at the Google API level:
   - "Failed to get or refresh tokens: Gmail authentication failed: No refresh token available for account: 110197326828888442595"
   - This suggests an authentication issue, not a code logic issue

RELEVANT CODE SECTIONS:
-----------------------

1. DELETION HANDLER IN ASANAKANBANBOARD.TSX (src/components/tasks/AsanaKanbanBoard.tsx):
```typescript
const handleDeleteTask = async (taskId: string, columnId: string) => {
  try {
    console.log('[DEBUG] Deleting task:', { taskId, columnId });
    
    // Get the task to find its Google Task ID
    const column = columns.find(c => c.id === columnId);
    const task = column?.tasks.find(t => t.id === taskId);
    
    if (!task) {
      console.error('Task not found:', taskId);
      return;
    }
    
    console.log('[DEBUG] Task found:', { 
      taskTitle: task.title,
      googleTaskId: task.metadata?.googleTaskId,
      columnId,
      columnTitle: column.title
    });
    
    // Delete from local Kanban store first (optimistic deletion)
    await deleteTask(columnId, taskId);
    setContextMenu(null);
    
    // Then delete from Google Tasks if it has a Google Task ID
    if (task?.metadata?.googleTaskId && activeAccount && isAuthenticated) {
      const { deleteTask: deleteGoogleTask, taskLists, syncAllTasks } = useGoogleTasksStore.getState();
      
      // Log available task lists
      console.log('[DEBUG] Available Google Task Lists:', taskLists.map(tl => ({ 
        id: tl.id, 
        title: tl.title 
      })));
      
      // Since columnId should be the Google Task List ID, use it directly
      const googleTaskListId = columnId;
      
      console.log('[DEBUG] Deleting from Google Tasks:', { 
        googleTaskListId, 
        googleTaskId: task.metadata.googleTaskId,
        columnTitle: column.title,
        columnId: columnId,
        isColumnIdSameAsTaskListId: columnId === googleTaskListId
      });
      
      try {
        await deleteGoogleTask(googleTaskListId, task.metadata.googleTaskId);
        console.log('[DEBUG] Successfully deleted from Google Tasks');
        
        // Don't sync immediately - let the periodic sync handle it
        // This prevents race conditions where Google hasn't fully processed the deletion
        console.log('[DEBUG] Skipping immediate sync after deletion');
      } catch (googleError) {
        console.error('[DEBUG] Failed to delete from Google Tasks:', googleError);
        // Re-add the task to local store if Google deletion failed
        const { createTask: createLocalTask } = useKanbanStore.getState();
        await createLocalTask(columnId, task);
        alert('Failed to delete task from Google Tasks. The task has been restored.');
      }
    }
  } catch (error) {
    console.error('Failed to delete task:', error);
    alert('Failed to delete task. Please try again.');
  }
};
```

2. GOOGLE TASKS STORE DELETE IMPLEMENTATION (src/stores/googleTasksStore.ts):
```typescript
deleteTask: async (taskListId: string, taskId: string) => {
  const account = get().getCurrentAccount();
  if (!account) {
    throw new Error('No active Google account');
  }

  try {
    logger.debug(`[GOOGLE-TASKS] Deleting task ${taskId} from list ${taskListId}`);
    const response = await googleTasksService.deleteTask(account, taskListId, taskId);

    if (response.success) {
      set((state) => {
        state.tasks[taskListId] = (state.tasks[taskListId] || []).filter(t => t.id !== taskId);
      });
    } else {
      throw new Error(response.error?.message || 'Failed to delete task');
    }
  } catch (error) {
    console.error('❌ [GOOGLE-TASKS] Failed to delete task:', error);
    set((state) => {
      state.error = error instanceof Error ? error.message : 'Failed to delete task';
    });
    // Re-throw the error so the caller knows it failed
    throw error;
  }
},
```

3. GOOGLE TASKS SERVICE DELETE (src/services/google/googleTasksService.ts):
```typescript
async deleteTask(
  account: GoogleAccount,
  taskListId: string,
  taskId: string
): Promise<ApiResponse<void>> {
  try {
    console.log('[GOOGLE-TASKS-SERVICE] Deleting task:', {
      accountId: account.id,
      taskListId,
      taskId,
    });
    
    await apiInvoke('delete_task', {
      accountId: account.id,
      taskListId,
      taskId,
    });

    console.log('[GOOGLE-TASKS-SERVICE] Task deleted successfully');
    return { success: true };
  } catch (error) {
    console.error('[GOOGLE-TASKS-SERVICE] Failed to delete task:', error);
    return {
      success: false,
      error: await this.handleApiError(error)
    };
  }
}
```

4. KANBAN STORE DELETE (src/stores/useKanbanStore.ts):
```typescript
async deleteTask(columnId, taskId) {
  
  // Optimistic removal
  const newColumns = get().columns.map(c =>
    c.id === columnId
      ? { ...c, tasks: c.tasks.filter(t => t.id !== taskId) }
      : c
  );
  
  set({ columns: newColumns });
},
```

5. SYNC SERVICE MAPPING (src/services/kanbanGoogleTasksSync.ts):
```typescript
// Create Kanban columns for each Google Task list
for (const taskList of googleStore.taskLists) {
  // Create a safe column ID from the task list title
  const columnId = taskList.id || taskList.title.toLowerCase().replace(/\s+/g, '-');
  
  // Add column to Kanban board
  kanbanStore.addColumn(columnId, taskList.title);
  
  // Create mapping
  this.syncMappings.push({
    kanbanColumnId: columnId,
    googleTaskListId: taskList.id
  });
  
  logger.info(`[SYNC] Created Kanban column "${taskList.title}" for Google Task list`);
}
```

6. SYNC SERVICE DELETION HANDLING (src/services/kanbanGoogleTasksSync.ts):
```typescript
// Remove Kanban tasks that no longer exist in Google
const tasksToRemove = column.tasks.filter(t => 
  t.metadata?.googleTaskId && 
  !googleTaskIds.has(t.metadata.googleTaskId) &&
  !kanbanTasksToKeep.has(t.id)
);

for (const taskToRemove of tasksToRemove) {
  await kanbanStore.deleteTask(column.id, taskToRemove.id);
  logger.debug(`[SYNC] Removed Kanban task that no longer exists in Google: ${taskToRemove.title}`);
}
```

KEY OBSERVATIONS:
-----------------
1. The code logic appears correct - we're using the right IDs and calling the right functions
2. The error is an authentication issue: "No refresh token available for account"
3. The account ID exists (110197326828888442595) but lacks a refresh token
4. This suggests the Google authentication token has expired or is invalid

POTENTIAL ROOT CAUSES:
----------------------
1. The Google OAuth refresh token has expired or been revoked
2. The user needs to re-authenticate with Google
3. The token refresh mechanism is failing
4. The account is authenticated for reading but not for write operations

DEBUGGING STEPS TO INVESTIGATE:
-------------------------------
1. Check if other Google Tasks operations work (create, update)
2. Check the Google account authentication status in Settings
3. Try re-authenticating the Google account
4. Check if the refresh token is stored properly in the auth store
5. Verify the OAuth scopes include write permissions for Google Tasks

ADDITIONAL CODE TO CHECK:
-------------------------
1. Google authentication flow and token storage
2. Token refresh mechanism
3. OAuth scope configuration
4. Error handling in the Gmail/Google authentication service

CONSOLE LOG ANALYSIS:
---------------------
The console shows:
- Task found correctly with IDs
- Local deletion succeeds
- Google API call fails with auth error
- Error is properly caught and logged
- No successful deletion from Google Tasks

The issue is NOT with the deletion logic but with the Google authentication state.