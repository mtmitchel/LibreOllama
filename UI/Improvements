
AI Agent Prompt: LibreOllama UI/UX Refactoring
Objective: Execute a comprehensive UI/UX refactoring of the LibreOllama application. The primary goal is to resolve architectural inconsistencies that make the UI feel "sloppy and unorganized." This will be achieved by unifying the styling system, creating a consistent page layout structure, and refactoring components to be self-contained and maintainable. The target is a polished, professional, and consistent user interface.

Guiding Principles:

Single Source of Truth: src/styles/design-system.css will contain only root CSS variables. All component styling will be handled by Tailwind CSS utility classes.
Component-Driven Architecture: Replace large, monolithic page structures with smaller, reusable components.
Consistency: Ensure all pages and components share the same layout rules, spacing, and typographic scales.
Phase 1: Architectural Refactoring - Establish a Consistent Page Layout
Goal: Create a single, reusable PageLayout component to enforce a consistent structure for all main application pages.

Step 1.1: Create the Master PageLayout Component

Action: Create a new file at src/components/ui/PageLayout.tsx.

Content: This component will encapsulate the UnifiedHeader and provide a standardized <main> content area with consistent padding.

TypeScript

// src/components/ui/PageLayout.tsx
import React from 'react';
import { UnifiedHeader } from './UnifiedHeader';

// Define a clear interface for the header's props
interface PageHeaderProps {
  title: string;
  primaryAction?: {
    label: string;
    onClick: () => void;
    icon?: React.ReactNode;
  };
  viewSwitcher?: React.ReactNode;
  secondaryActions?: {
    label: string;
    onClick: () => void;
    variant?: 'ghost' | 'secondary';
  }[];
   breadcrumb?: { path: string; label: string; }[];
}

interface PageLayoutProps {
  headerProps: PageHeaderProps;
  children: React.ReactNode;
}

export const PageLayout: React.FC<PageLayoutProps> = ({ headerProps, children }) => {
  return (
    <div className="flex flex-col h-full w-full bg-background">
      <UnifiedHeader {...headerProps} />
      {/* This <main> tag now enforces consistent padding for all pages */}
      <main className="flex-1 overflow-y-auto p-6 lg:p-8">
        {children}
      </main>
    </div>
  );
};
Step 1.2: Integrate PageLayout into All Main Page Components

Action: Refactor each page component in the src/pages/ directory (Dashboard.tsx, Projects.tsx, Tasks.tsx, etc.) to use the new PageLayout component. Remove any redundant layout containers and header renderings from the individual pages.

Example Refactoring for Dashboard.tsx:

Analyze Dashboard.tsx: Identify the existing UnifiedHeader call and the main content divs (.content-area, .dashboard-grid).
Modify Dashboard.tsx:
Import PageLayout.
Create a headerProps object containing all the props that were previously passed to UnifiedHeader.
Wrap the page's content in <PageLayout headerProps={headerProps}>.
Remove the original <UnifiedHeader> and any container divs that added padding or layout.
TypeScript

// src/pages/Dashboard.tsx
import { PageLayout } from '../components/ui/PageLayout';
import { PlusCircle } from 'lucide-react';
// Other imports...

export function Dashboard() {
  const handleAddWidget = () => console.log('Add widget');

  const headerProps = {
    title: "Good morning, Alex",
    primaryAction: { 
      label: 'Add widget', 
      onClick: handleAddWidget, 
      icon: <PlusCircle size={16} /> 
    }
  };

  return (
    <PageLayout headerProps={headerProps}>
      <p className="text-text-secondary -mt-4 mb-6">
        Here's what's happening today.
      </p>
      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {/* ...Your dashboard widgets... */}
      </div>
    </PageLayout>
  );
}
Instruction: Apply this exact refactoring pattern to Projects.tsx, Tasks.tsx, Chat.tsx, Canvas.tsx, Calendar.tsx, Agents.tsx, and Settings.tsx.

Phase 2: CSS Simplification & Unification with Tailwind
Goal: Eliminate the conflict between global CSS classes and Tailwind by making Tailwind the primary styling engine, configured to use your design tokens.

Step 2.1: Prune Global CSS Files

Action: Edit src/styles/design-system.css and src/styles/App.css.
Instructions:
In design-system.css, DELETE ALL CSS RULES except for the :root block, the html.light block, the base body styles, and the scrollbar styles. All specific component classes like .widget, .kanban-column, etc., must be removed.
In App.css, DELETE ALL CSS RULES except for the top-level .app-container and the .focus-mode-active styles. All component-specific styles must be removed.
Step 2.2: Fully Configure tailwind.config.ts

Action: Modify tailwind.config.ts to consume the CSS variables from your design system.

Instructions: Update the theme.extend object to map Tailwind's keys to your CSS variables. This ensures that when you use a class like bg-primary, it uses var(--accent-primary).

TypeScript

// tailwind.config.ts
// ...
theme: {
  extend: {
    colors: {
      'primary': 'var(--accent-primary)',
      'background': 'var(--bg-primary)',
      'surface': 'var(--bg-surface)',
      'text-primary': 'var(--text-primary)',
      'text-secondary': 'var(--text-secondary)',
      'border-subtle': 'var(--border-subtle)',
      // ...map all your important colors
    },
    spacing: {
      '1': 'var(--space-1)', '2': 'var(--space-2)', /* ...map all spaces */
    },
    borderRadius: {
      sm: 'var(--radius-sm)', md: 'var(--radius-md)', /* ...map all radii */
    },
  },
},
// ...
Phase 3: Component Refactoring with Tailwind CSS
Goal: Rebuild components to be self-contained and styled with Tailwind utility classes, removing reliance on the now-deleted global CSS classes.

Step 3.1: Create a Reusable Card Component

Action: The elements .widget, .agent-card, and .kanban-column are all conceptually cards. Create a single, flexible Card component to replace them.

File: Create src/components/ui/Card.tsx.

Content:

TypeScript

// src/components/ui/Card.tsx
import React from 'react';

interface CardProps {
  children: React.ReactNode;
  className?: string;
  as?: React.ElementType;
}

export const Card: React.FC<CardProps> = ({ children, className = '', as: Component = 'div' }) => {
  // These Tailwind classes define the "Card" component style once.
  const baseClasses = "bg-surface border border-border-subtle rounded-lg p-5 transition-all duration-200 hover:shadow-md hover:border-border-default";
  return (
    <Component className={`${baseClasses} ${className}`}>
      {children}
    </Component>
  );
};
Step 3.2: Refactor Pages to Use the New Card Component

Action: Go through the pages that used card-like structures and replace the old divs with the new Card component.
Instructions:
In Dashboard.tsx, replace all instances of <div className="widget"> with <Card>.
In Agents.tsx, replace <div className="agent-card"> with <Card>.
In Tasks.tsx, the Kanban column is a list item. Use the as prop: replace <div className="kanban-column"> with <Card as="li" className="w-80 flex-shrink-0">.
Final Check: After these changes, the UI will likely appear unstyled in places. Proceed to apply Tailwind classes for typography, layout (flex/grid), and spacing to restore and unify the appearance of the content within each card.
Final Instruction: Upon completing these three phases, the application's UI architecture will be unified and robust. All styling will be driven by a single, maintainable system. Please execute this plan sequentially and confirm completion of each phase.