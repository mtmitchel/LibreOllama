Based on my thorough analysis of your codebase and the latest screenshots, you are correct. The UI has critical layout and styling issues that leave it looking broken and unprofessional. The previous refactoring was a necessary step to remove conflicting styles, but the essential second step—re-implementing the visual structure with a consistent system—is incomplete.

This document provides a definitive, highly detailed, and actionable plan to fix these issues and align the application with a professional UI/UX standard.

### **Part 1: The Critical Layout Bug - Why the Sidebar is Jumbled**

**Diagnosis:**
The most severe issue, visible in all screenshots, is that the main application header (the "top bar" containing the search and user icons) is being rendered **inside** the left sidebar instead of above the main content. This is a structural error in your primary layout file, `src/App.tsx`.

**Action: Fix the `App.tsx` Layout Structure**
The `<Sidebar />` component and the main content column (`<div className="page-column">`) must be direct sibling elements inside the main flex container. The top bar must be a child of the main content column, not the sidebar.

* **File to Edit:** `src/App.tsx`

**Corrected `App.tsx` Structure:**
```tsx
// src/App.tsx

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';
import Sidebar from './components/navigation/Sidebar';
import { UnifiedHeader } from './components/ui/UnifiedHeader';
// Import all your page components...
import Dashboard from './pages/Dashboard';
import ChatHub from './pages/Chat';
// ... other imports

export default function App() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  // ... other hooks

  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);

  return (
    <Router>
      {/* The main flex container */}
      <div className="flex h-screen bg-bg-primary text-text-primary">
        
        {/* SIBLING 1: The Sidebar */}
        <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />

        {/* SIBLING 2: The Main Content Column */}
        <div className="flex flex-1 flex-col overflow-hidden">
          
          {/* The Top Bar is the FIRST child of the main column */}
          <UnifiedHeader
            title="Workspace" // This can be made dynamic based on route
            // ... other header props
          />
          
          {/* The Content Area is the SECOND child, taking remaining space */}
          <main className="flex-1 overflow-y-auto p-6 lg:p-8">
            <Routes>
              <Route path="/" element={<Dashboard />} />
              <Route path="/chat" element={<ChatHub />} />
              {/* Define all other routes here */}
            </Routes>
          </main>
        </div>
      </div>
    </Router>
  );
}
```
**Implementing this change will immediately fix the jumbled sidebar and place the top bar correctly.**

---

### **Part 2: Fixing "Deformed and Lacking Uniformity" Containers**

**Diagnosis:**
Your screenshots of the Dashboard, Tasks, and Agents pages show unstyled white boxes. This is because the global CSS classes (`.widget`, `.kanban-column`, `.agent-card`) were removed (which was correct), but they were not replaced with Tailwind utility classes that define their appearance (background, padding, border, shadow).

**Action: Create and Use a Single, Reusable `Card` Component**
This is the cornerstone of achieving UI consistency. You will create one `Card` component and use it everywhere.

* **Step 2.1: Create the `Card.tsx` Component**
    * **File Location:** `src/components/ui/Card.tsx`
    * **Content:** This component will be styled once, perfectly, using Tailwind utilities that are mapped to your design tokens.

    ```tsx
    // src/components/ui/Card.tsx
    import React from 'react';

    interface CardProps {
      children: React.ReactNode;
      className?: string;
      as?: React.ElementType; // Allows rendering as 'div', 'li', etc.
      padding?: 'default' | 'none'; // Control padding
    }

    export const Card: React.FC<CardProps> = ({ children, className = '', as: Component = 'div', padding = 'default' }) => {
      const paddingClass = padding === 'default' ? 'p-4 sm:p-6' : '';

      return (
        <Component
          className={`
            bg-surface border border-border-subtle rounded-lg 
            transition-all duration-200 hover:shadow-md hover:border-border-default
            ${paddingClass}
            ${className}
          `}
        >
          {children}
        </Component>
      );
    };
    ```

* **Step 2.2: Refactor All Pages to Use the New `Card` Component**
    This will instantly make your Dashboard widgets, Task columns, and Agent cards look identical and professional.

    * **Example: Refactor `Agents.tsx`**

        **Before (Unstyled):**
        ```tsx
        // In src/pages/Agents.tsx
        <div className="agents-grid">
          {filteredAgents.map((agent) => (
            <div key={agent.id} className="agent-card">
              {/* ...content with placeholder comments... */}
            </div>
          ))}
        </div>
        ```
        **After (Consistent and Styled):**
        ```tsx
        // src/pages/Agents.tsx
        import { Card } from '../components/ui/Card'; // Import the new component

        // ... inside the Agents component render function
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
          {filteredAgents.map((agent) => (
            <Card key={agent.id} className="flex flex-col">
              <div className="flex items-center gap-4 mb-4">
                <div className="w-10 h-10 bg-bg-tertiary rounded-md flex items-center justify-center text-accent-primary">
                  {getAgentIcon(agent.icon)}
                </div>
                <div className="flex-grow">
                  <h3 className="font-semibold text-text-primary">{agent.name}</h3>
                  <p className="text-xs text-text-tertiary">{agent.model}</p>
                </div>
                <div className={`w-2.5 h-2.5 rounded-full ${agent.status === 'online' ? 'bg-success' : 'bg-muted'}`} />
              </div>
              <p className="text-sm text-text-secondary flex-grow">{agent.description}</p>
              {/* ... capabilities and actions styled with Tailwind ... */}
            </Card>
          ))}
          {/* Refactor the "Create new agent" card similarly */}
        </div>
        ```
* **Instruction:** Apply this exact pattern to fix the other pages:
    * **For `Dashboard.tsx`:** Replace every `<div className="widget">` with your new `<Card>`.
    * **For `Tasks.tsx`:** Replace `<div className="kanban-column">` with `<Card as="li" padding="none">`. You'll need to add padding to the header and content areas *inside* the card manually with Tailwind classes (`p-4`) to achieve the correct Kanban look.

---

### **Part 3: Fixing Missing and Jumbled Content**

**Diagnosis:**
The content appears jumbled because the containers lack internal padding and structure. The text and icons are flush against the edges of the unstyled boxes.

**Action: Apply Internal Layout and Typography with Tailwind**
Now that you have a consistent `Card` component, apply internal spacing and typography to the content within it.

* **Example: Fixing the content inside an Agent Card**

    ```tsx
    // Inside the refactored Card in Agents.tsx
    <Card key={agent.id} className="flex flex-col">
      {/* Header section with padding and alignment */}
      <div className="flex items-start gap-4 mb-4">
        {/* Icon wrapper with size and color */}
        <div className="flex-shrink-0 w-10 h-10 bg-bg-tertiary rounded-md flex items-center justify-center text-primary">
          {getAgentIcon(agent.icon)}
        </div>
        {/* Text container */}
        <div className="flex-grow">
          <h3 className="font-semibold text-text-primary">{agent.name}</h3>
          <p className="text-sm text-text-tertiary">{agent.model}</p>
        </div>
        {/* Status dot */}
        <div className={`w-2.5 h-2.5 rounded-full flex-shrink-0 ${agent.status === 'online' ? 'bg-success' : 'bg-muted'}`} />
      </div>

      {/* Description with bottom margin */}
      <p className="text-sm text-text-secondary flex-grow mb-4">{agent.description}</p>
      
      {/* Capabilities section */}
      <div className="mb-4">
        <h4 className="text-xs font-semibold text-text-muted uppercase tracking-wider mb-2">Capabilities</h4>
        <div className="flex flex-wrap gap-2">
          {agent.capabilities.map((capability) => (
            <span key={capability} className="text-xs bg-bg-secondary text-text-secondary px-2 py-1 rounded">
              {capability}
            </span>
          ))}
        </div>
      </div>
      
      {/* Actions section with top border for separation */}
      <div className="flex items-center gap-2 pt-4 mt-auto border-t border-border-subtle">
        <button className="btn btn-secondary btn-sm flex-grow">Configure</button>
        <button className="btn btn-ghost btn-sm">Delete</button>
      </div>
    </Card>
    ```

By following this highly detailed, three-part plan, you will resolve the structural, stylistic, and content-display issues, resulting in the clean, uniform, and professional application shown in the design mockups.