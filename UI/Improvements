Of course. After reviewing the new screenshots and re-examining your codebase, I can pinpoint the exact cause of the layout issue and provide detailed, actionable feedback.

You are correct to point it outâ€”the layout is fundamentally broken. The main content area is displaying *below* the sidebar instead of *next to it*.

### **Root Cause Analysis: The Missing Flex Container**

The core problem is that the main container in your application, which holds both the sidebar and the main content, is not configured to lay out its children horizontally. In standard HTML/CSS, `div` elements are block-level, meaning they stack vertically by default.

To achieve the classic sidebar-main content layout, their parent container **must** have `display: flex;` applied to it.

While you correctly have a class `.app-container` in `src/styles/design-system.css` that includes `display: flex;`, it appears this style is not being correctly applied or is being overridden. This can happen due to CSS load order, specificity conflicts, or build process issues.

The most robust and modern solution is to apply this critical layout style directly in your component using Tailwind's utility classes, making the layout explicit and removing any dependency on the external CSS file working perfectly.

### **Actionable Fix: Modifying `App.tsx`**

The fix is a simple but crucial one-line change in your main application component.

1.  **Open the file:** `src/App.tsx`

2.  **Locate the main container `div`:** Find the top-level `div` inside your `<Router>`. It will have a `className` that includes `app-container`.

    **Current Code in `App.tsx`:**
    ```tsx
    // src/App.tsx

    return (
      <Router>
        <div className={`app-container ${isFocusMode ? 'focus-mode-active' : ''} ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>
          {!isFocusMode && <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />} 
          <div className="page-column">
            {/* ... rest of the app */}
    ```

3.  **Add the `flex` utility class:** To force this container to act as a flexbox container, simply add the `flex` class to its `className` string.

    **Corrected Code:**
    ```tsx
    // src/App.tsx

    return (
      <Router>
        {/* Add the `flex` class here */}
        <div className={`flex app-container ${isFocusMode ? 'focus-mode-active' : ''} ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>
          {!isFocusMode && <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />} 
          <div className="page-column">
            {/* ... rest of the app */}
    ```

### **Why This Fixes the Problem**

* By adding the `flex` utility class, you are explicitly telling the browser to arrange the direct children of this `div` (which are the `<Sidebar>` component and the `<div className="page-column">`) in a horizontal row.
* The `<div className="page-column">` will now correctly take up the remaining space to the right of the sidebar, instead of being pushed below it.

### **Recommended Cleanup (Optional but Strongly Advised)**

To prevent future conflicts and simplify your styling, you should now remove the competing layout styles from your global CSS files. Since Tailwind is now handling the layout directly on the component, these global classes are redundant and confusing.

1.  **Edit `src/styles/design-system.css`:**
    * **Find** the `.app-container` class definition.
    * **Remove** the `display: flex;` rule from it. You can keep the `min-height` and `gap` rules if you wish, though `gap` is also better handled by Tailwind (`gap-6`, `gap-8`, etc.).

    **Before:**
    ```css
    .app-container {
      display: flex;
      min-height: 100vh;
      gap: var(--space-layout-gutter);
    }
    ```
    **After:**
    ```css
    .app-container {
      /* display: flex;  <-- REMOVED */
      min-height: 100vh;
      gap: var(--space-layout-gutter);
    }
    ```

2.  **Edit `src/styles/App.css`:**
    * **Review** this file for any other `display: flex` or `display: grid` rules that apply to your main layout containers. It's best practice to define these directly on the components in your `.tsx` files with Tailwind utilities for clarity and co-location of logic and layout.

By making this change, your code becomes more declarative and easier to understand. A developer looking at `App.tsx` will immediately see `className="flex..."` and understand how the layout works without having to hunt through multiple CSS files. This is the core strength of the utility-first CSS approach.