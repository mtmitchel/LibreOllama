Of course. Here is a more detailed, step-by-step guide to help you refactor your codebase and resolve the design inconsistencies. This plan will walk you through consolidating your styles and applying them consistently across your components.

### Phase 1: Consolidate Your CSS and Create a Single Source of Truth (2-3 hours)

The goal of this phase is to make **`src/styles/design-system.css`** the definitive source for all design tokens and to properly integrate it with Tailwind CSS.

**Step 1.1: Finalize Your Design Tokens**

Ensure your core design system file, `src/styles/design-system.css`, contains all the CSS variables you need. You have a great start, but you should also consolidate variables for typography and shadows here.

* **Action:** Add font sizes, font weights, and box shadows to the `:root` selector in `src/styles/design-system.css`.

    ```css
    /* In src/styles/design-system.css */
    :root {
      /* ... existing color, spacing, radius variables */

      /* Typography */
      --font-sans: 'Inter', 'system-ui', sans-serif;
      --font-mono: 'JetBrains Mono', 'Fira Code', monospace;

      --font-size-xs: 11px;
      --font-size-sm: 12px;
      --font-size-base: 14px;
      --font-size-lg: 16px;
      --font-size-xl: 18px;
      --font-size-2xl: 20px;

      --font-weight-normal: 400;
      --font-weight-medium: 500;
      --font-weight-semibold: 600;
      --font-weight-bold: 700;

      /* Shadows */
      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
    }
    ```

**Step 1.2: Configure Tailwind to Use Your Design Tokens**

Modify `tailwind.config.ts` to use your CSS variables. This is the most critical step to bridge the gap between your design system and Tailwind's utility classes.

* **Action:** Update your `tailwind.config.ts` to extend the theme, mapping Tailwind keys to your CSS variables.

    ```typescript
    // In tailwind.config.ts
    import type { Config } from "tailwindcss";

    const config: Config = {
      darkMode: ["class"],
      content: [
        "./index.html",
        "./src/**/*.{js,ts,jsx,tsx}",
      ],
      theme: {
        extend: {
          colors: {
            primary: 'var(--accent-primary)',
            secondary: 'var(--accent-secondary)',
            success: 'var(--success)',
            warning: 'var(--warning)',
            error: 'var(--error)',
            // Define text and background colors
            'text-primary': 'var(--text-primary)',
            'text-secondary': 'var(--text-secondary)',
            'text-tertiary': 'var(--text-tertiary)',
            'bg-primary': 'var(--bg-primary)',
            'bg-secondary': 'var(--bg-secondary)',
            'bg-surface': 'var(--bg-surface)',
          },
          spacing: {
            '1': 'var(--space-1)',
            '2': 'var(--space-2)',
            '3': 'var(--space-3)',
            '4': 'var(--space-4)',
            '5': 'var(--space-5)',
            '6': 'var(--space-6)',
            '8': 'var(--space-8)',
          },
          borderRadius: {
            sm: 'var(--radius-sm)',
            md: 'var(--radius-md)',
            lg: 'var(--radius-lg)',
            xl: 'var(--radius-xl)',
          },
          fontFamily: {
            sans: ['var(--font-sans)'],
            mono: ['var(--font-mono)'],
          },
          fontSize: {
             xs: 'var(--font-size-xs)',
             sm: 'var(--font-size-sm)',
             base: 'var(--font-size-base)',
             lg: 'var(--font-size-lg)',
             xl: 'var(--font-size-xl)',
             '2xl': 'var(--font-size-2xl)',
          },
          boxShadow: {
            sm: 'var(--shadow-sm)',
            md: 'var(--shadow-md)',
            lg: 'var(--shadow-lg)',
          }
        },
      },
      plugins: [],
    };

    export default config;
    ```

**Step 1.3: Clean Up and Consolidate CSS Files**

* **Action:**
    1.  Move any reusable, non-utility styles from `src/styles/App.css`, `src/pages/Chat.css`, and `src/pages/Settings.css` into `src/styles/design-system.css`.
    2.  Delete `src/styles/index.css`. Its only purpose was loading Tailwind, which should be handled by your main entry point.
    3.  Ensure CSS files are imported in the correct order in `src/main.tsx`.

    ```typescript
    // In src/main.tsx
    import React from "react";
    import ReactDOM from "react-dom/client";
    import App from "./App.tsx";
    import { ThemeProvider } from "./components/ThemeProvider";

    // 1. Import the design system with all variables and base styles first.
    import "./styles/design-system.css";
    // 2. Import App.css for any remaining layout-specific styles.
    import "./styles/App.css";

    ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
      <React.StrictMode>
        <ThemeProvider>
          <App />
        </ThemeProvider>
      </React.StrictMode>,
    );
    ```

### Phase 2: Refactor Components to Use the Unified System (4-6 hours)

Now, apply the consolidated system to your React components.

**Step 2.1: Systematically Remove Inline Styles**

* **Action:** Go through each component file (`.tsx`) and replace all `style={{...}}` props with the equivalent Tailwind utility classes. This will make your components cleaner and ensure they adhere to the design system.

* **Example from `src/pages/Projects.tsx`:**

    **Before:**
    ```tsx
    <a
      key={project.id}
      href="#"
      className={`project-list-item-compact ${selectedProject.id === project.id ? 'active' : ''}`}
      onClick={(e) => {
        e.preventDefault();
        setSelectedProject(project);
      }}
      style={{
        display: 'flex',
        alignItems: 'center',
        gap: 'var(--space-2)',
        padding: 'var(--space-2) var(--space-3)',
        // ... more inline styles
      }}
    >
      {/* ... */}
    </a>
    ```

    **After (using Tailwind utilities that now map to your variables):**
    ```tsx
    <a
      key={project.id}
      href="#"
      className={`
        flex items-center gap-2 p-2 rounded-md no-underline text-text-secondary
        hover:bg-bg-elevated hover:text-text-primary transition-all
        ${selectedProject.id === project.id ? 'bg-accent-soft text-primary' : ''}
      `}
      onClick={(e) => {
        e.preventDefault();
        setSelectedProject(project);
      }}
    >
      {/* ... */}
    </a>
    ```

**Step 2.2: Delete Component-Specific Stylesheets**

* **Action:** Once you have refactored a component (like `Chat.tsx` or `Settings.tsx`) to use only utility classes or global classes from `design-system.css`, you can safely delete its corresponding CSS file (`Chat.css`, `Settings.css`).

### Phase 3: Enforce Guidelines and Maintain Consistency

**Step 3.1: Enforce Content and UI Guidelines**

* **Action:** Review your application's text against the rules in `docs/design-system/capitalization-guidelines.md`. For example, button labels like "Add Widget" or section titles like "UI Migration Sprint" should be changed to "Add widget" and "UI migration sprint" respectively.

**Step 3.2: Document the New Standard**

* **Action:** Update your project's `README.md` or `CONTRIBUTING.md` to clearly state the new styling policy:
    1.  All styling should primarily use Tailwind utility classes.
    2.  For complex, reusable styles that cannot be achieved with utilities, add a global class to `design-system.css`.
    3.  Inline styles (`style` prop) should be avoided entirely except for dynamic properties that cannot be handled by classes (e.g., `transform: 'translateX(...)'`).

By following these detailed steps, you will centralize your design language, eliminate conflicting styles, and make your application's UI much more consistent and easier to maintain.