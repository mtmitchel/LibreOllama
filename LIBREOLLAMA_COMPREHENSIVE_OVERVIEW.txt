# LibreOllama: Complete Senior Developer Overview

**Version:** 0.1.0  
**Last Updated:** January 2025  
**Repository:** https://github.com/mtmitchel/LibreOllama  
**License:** MIT

## Executive Summary

LibreOllama is a desktop AI-powered productivity suite built with **Tauri (Rust backend)** and **React 19 (TypeScript frontend)**. It provides an integrated workspace for thinking, creating, and organizing with features including Canvas (whiteboard), Gmail integration, Tasks management, Notes, Chat, and Calendar functionality.

**Key Architectural Principles:**
- **Privacy-first:** All data stored locally with SQLite encryption
- **AI-enhanced:** Leverages local Ollama for AI capabilities
- **Cross-platform:** Built with Tauri for Windows, macOS, and Linux
- **Modern stack:** React 19, TypeScript, Tailwind CSS, Zustand state management

## Project Structure

```
LibreOllama/
├── src/                      # React Frontend (TypeScript)
│   ├── app/                  # Main application routing and pages
│   ├── components/           # Shared UI components and design system
│   ├── features/             # Feature-specific modules
│   │   ├── canvas/           # Whiteboard system (production-ready)
│   │   ├── mail/             # Gmail integration (robust)
│   │   ├── tasks/            # Task management (functional)
│   │   ├── calendar/         # Calendar integration (functional)
│   │   ├── chat/             # AI chat system (UI complete, backend disconnected)
│   │   ├── notes/            # Note-taking (backend complete, frontend disconnected)
│   │   ├── dashboard/        # Dashboard widgets (limited data integration)
│   │   └── projects/         # Project management (UI shell only)
│   ├── core/                 # Core utilities and design system
│   ├── stores/               # Zustand state management
│   └── tests/                # Comprehensive test suite
├── src-tauri/                # Rust Backend
│   ├── src/
│   │   ├── commands/         # Tauri command handlers (domain-organized)
│   │   ├── services/         # Business logic services
│   │   ├── database/         # SQLite database operations
│   │   ├── utils/            # Utility functions
│   │   └── errors/           # Error handling system
│   └── target/               # Rust build artifacts
├── docs/                     # Comprehensive documentation
│   ├── roadmap/              # Feature-specific roadmaps
│   └── KONVA REACT GUIDES/   # Canvas development guides
└── design/                   # UI mockups and specifications
```

## Technology Stack

### Frontend
- **Framework:** React 19.1.0 with TypeScript 5.6.2
- **State Management:** Zustand 5.0.5 with Immer for immutable updates
- **Styling:** Tailwind CSS 3.4.17 with custom design system
- **Canvas:** Konva.js 9.3.20 with React-Konva 19.0.5
- **Rich Text:** Tiptap 2.24.2+ with comprehensive extension suite
- **Calendar:** FullCalendar 6.1.18 with React integration
- **Drag & Drop:** @dnd-kit 6.3.1+ for accessible interactions
- **Build Tool:** Vite 6.0.3 with React plugin

### Backend
- **Framework:** Tauri 2.5.0 with Rust backend
- **Database:** SQLite with SQLCipher encryption
- **Authentication:** OAuth2 with OS keyring token storage
- **HTTP Client:** Reqwest with async/await patterns
- **Error Handling:** Thiserror with comprehensive error types

### Development Tools
- **Testing:** Vitest 3.2.4 with React Testing Library
- **Linting:** ESLint with TypeScript rules
- **Stories:** Ladle for component documentation
- **Visual Testing:** Chromatic for UI regression testing
- **Type Checking:** TypeScript with strict mode

## Feature Implementation Status

### 🎯 Canvas System (Production-Ready - 98/100)
**Status:** Fully functional with exemplary implementation
**Location:** `src/features/canvas/`

**Architecture:**
- **Layer-based rendering:** Background → Main → Connector → UI layers
- **Element types:** 15+ types (Rectangle, Circle, Text, Sticky Notes, Pen, Image, Line, Arrow, Connector, Section, Table, etc.)
- **Tools:** Drawing tools (Pen, Marker, Highlighter, Eraser), Shape tools, Text tool, Connector tool with smart snapping
- **Performance:** Viewport culling, React.memo optimization, optimized store subscriptions

**Key Files:**
- `stores/unifiedCanvasStore.ts` - Centralized state management
- `layers/CanvasLayerManager.tsx` - Layer orchestration
- `components/tools/` - Modular tool system
- `shapes/` - Element renderers with React-Konva

**Testing:** 17 test files with comprehensive coverage

### 📧 Gmail Integration (Strong - 85/100)
**Status:** Robust with comprehensive features
**Location:** `src/features/mail/` and `src-tauri/src/services/gmail/`

**Architecture:**
- **Backend Services:** OAuth2 authentication, API integration, caching, sync
- **Frontend Store:** Multi-account management with Zustand
- **Security:** OS keyring token storage, encrypted database
- **Features:** Message threading, advanced search, attachments, compose

**Key Files:**
- `services/gmail/auth_service.rs` - OAuth2 authentication
- `services/gmail/api_service.rs` - Gmail API integration
- `stores/mailStore.ts` - Frontend state management
- `components/` - UI components for mail interface

**Testing:** Strong service layer tests with integration coverage

### 📋 Tasks Management (Good - 80/100)
**Status:** Functional with Google Tasks integration
**Location:** `src/stores/useKanbanStore.ts` and `src/app/pages/Tasks.tsx`

**Architecture:**
- **Frontend:** Kanban board with drag-and-drop (@dnd-kit)
- **Backend:** Google Tasks API integration
- **Features:** Multi-account support, task metadata, local storage persistence

**Key Files:**
- `stores/useKanbanStore.ts` - Task state management
- `app/pages/Tasks.tsx` - Main tasks interface
- `services/google/googleTasksService.ts` - API integration

### 📅 Calendar Integration (Good - 80/100)
**Status:** Feature-rich with Google Calendar integration
**Location:** `src/app/pages/Calendar.tsx`

**Architecture:**
- **Frontend:** FullCalendar v6 with multiple view types
- **Backend:** Google Calendar API integration
- **Features:** Event CRUD, task scheduling, multi-account support

**Key Files:**
- `app/pages/Calendar.tsx` - Main calendar interface
- `services/google/googleCalendarService.ts` - API integration
- `stores/googleCalendarStore.ts` - State management

### 💬 Chat System (Critical Gap - 40/100)
**Status:** Complete backend, UI complete, but DISCONNECTED
**Location:** `src/features/chat/` and `src-tauri/src/commands/chat/`

**Critical Issue:** Frontend uses mock data and doesn't call backend services
**Backend:** Complete database operations, session management
**Frontend:** Full UI with conversation list, message bubbles, input
**Missing:** Frontend-backend integration, Ollama AI integration

**Key Files:**
- `commands/chat/sessions.rs` - Backend session management
- `features/chat/components/` - UI components (uses mock data)
- **Missing:** Store integration and service layer

### 📝 Notes System (Critical Gap - 40/100)
**Status:** Complete backend, rich frontend, but DISCONNECTED
**Location:** `src/features/notes/` and `src-tauri/src/commands/notes.rs`

**Critical Issue:** Frontend uses mock data instead of backend services
**Backend:** Complete database operations, CRUD, search
**Frontend:** Tiptap rich text editor, folder navigation
**Missing:** Frontend-backend integration, data persistence

**Key Files:**
- `commands/notes.rs` - Backend CRUD operations
- `features/notes/components/` - Rich text editor components
- **Missing:** Store integration and service layer

### 🏠 Dashboard (Limited Integration - 35/100)
**Status:** Widget framework exists, limited data integration
**Location:** `src/features/dashboard/components/`

**Architecture:**
- **Widget System:** Modular widget framework
- **Widgets:** 7 widgets with varying data integration levels
- **Layout:** Responsive grid system

**Key Files:**
- `features/dashboard/components/` - Widget components
- `app/pages/Dashboard.tsx` - Main dashboard page

### 🚀 Projects (UI Shell Only - 25/100)
**Status:** Complete UI framework, no backend functionality
**Location:** `src/features/projects/`

**Critical Issue:** No backend services, uses empty mock data
**Frontend:** Complete project management interface
**Missing:** Backend implementation, data persistence, actual functionality

### 🤖 Agents (Placeholder - 10/100)
**Status:** Minimal placeholder implementation
**Location:** `src/app/pages/Agents.tsx`

**Critical Issue:** Concept undefined, no functionality
**Missing:** Agent definition, backend services, UI implementation

### ⚙️ Settings (Functional - 75/100)
**Status:** Complete UI with functional integrations
**Location:** `src/app/pages/Settings.tsx`

**Architecture:**
- **Frontend:** Complete settings interface
- **Features:** Theme management, Google integration, Ollama configuration
- **Persistence:** localStorage with Zustand

## Backend Architecture

### Service-Oriented Design
The Rust backend follows a clean service-oriented architecture:

```
src-tauri/src/
├── services/
│   └── gmail/           # Gmail service suite
│       ├── auth_service.rs
│       ├── api_service.rs
│       ├── compose_service.rs
│       └── sync_service.rs
├── commands/            # Tauri command handlers
│   ├── gmail/
│   ├── tasks/
│   ├── calendar/
│   ├── chat/
│   └── agents/
├── database/            # SQLite operations
│   ├── connection.rs
│   ├── operations/
│   └── models.rs
└── utils/               # Utility functions
```

### Database Schema
- **SQLite with SQLCipher** for encryption
- **Versioned migrations** for schema evolution
- **Comprehensive operations** for all features
- **Test coverage** for database operations

### Command Interface
- **Domain-grouped commands** for better organization
- **Comprehensive error handling** with typed errors
- **Rate limiting** for API calls
- **Secure token storage** with OS keyring integration

## Design System

### Comprehensive UI Components
**17 production-ready components** with full documentation:

**Core Components:**
- Button, Card, Input, Heading, Text
- Avatar, Badge, Progress, Spinner, StatusBadge
- EmptyState, ErrorState

**Advanced Components:**
- ProgressRing, Stepper, HeatMapCalendar
- ColorSwatch, DragOverlay, TypingIndicator
- ToggleRow, Tooltip

**Layout Components:**
- PageLayout, UnifiedHeader, TopBar, Sidebar
- ThemeProvider, DropdownMenu, FlexibleGrid
- CommandPalette (Cmd+K functionality)

### Design Token System
- **Semantic color system** with light/dark theme support
- **Typography scale** with consistent font weights
- **Spacing system** based on 4px units
- **Animation system** with motion-safe patterns
- **Tailwind integration** with custom utilities

### Documentation
- **Ladle stories** for interactive component documentation
- **Design token reference** with visual examples
- **Implementation guidelines** and best practices

## Testing Strategy

### Current Testing Status: **Good (80/100)**
Comprehensive testing infrastructure with strong coverage in key areas:

**Exemplary Coverage:**
- **Canvas (98/100):** 17 test files, store-first testing, performance tests
- **Gmail (85/100):** Service layer tests, UI integration, backend tests
- **Backend Services (80/100):** Database tests, rate limiting, service integration

**Recently Improved:**
- **Tasks (80/100):** API integration tests, drag-and-drop tests
- **Calendar (80/100):** API integration tests, CRUD operations
- **Chat (80/100):** Integration tests added for frontend-backend flow
- **Dashboard (80/100):** Widget integration tests

### Testing Architecture
- **Store-first testing** methodology (Canvas model)
- **Service layer integration** testing (Gmail model)
- **Real store instances** instead of mocks
- **Comprehensive test utilities** and helpers

### Test Structure
```
src/tests/
├── integration/         # Feature integration tests
├── helpers/            # Test utilities and mocks
├── utils/              # Testing utilities
└── __mocks__/          # Mock implementations
```

## Development Workflow

### Prerequisites
- **Node.js 18+** with npm
- **Rust 1.70+** with Cargo
- **Tauri CLI** for development commands

### Commands
```bash
# Development
npm run tauri:dev          # Start development server
npm run dev                # Frontend only development

# Building
npm run tauri:build        # Production build
npm run build              # Frontend build only

# Testing
npm test                   # Run all tests
npm run test:watch         # Watch mode
npm run test:coverage      # Coverage report

# Linting and Type Checking
npm run lint               # ESLint
npm run type-check         # TypeScript check
npm run lint:design-system # Design system compliance

# Documentation
npm run ladle              # Component documentation
npm run chromatic          # Visual testing
```

### Rust Backend Commands
```bash
# In src-tauri directory
cargo check                # Type checking
cargo test                 # Run tests
cargo clippy              # Linting
cargo fmt                 # Code formatting
```

## Critical Implementation Gaps

### 1. Chat System Integration (High Priority)
**Problem:** Complete backend exists but frontend uses mock data
**Solution:** Connect frontend components to backend services
**Files:** `src/features/chat/components/` → `src-tauri/src/commands/chat/`

### 2. Notes System Integration (High Priority)
**Problem:** Complete backend exists but frontend uses mock data
**Solution:** Connect Tiptap editor to backend persistence
**Files:** `src/features/notes/components/` → `src-tauri/src/commands/notes.rs`

### 3. Projects Backend Implementation (Medium Priority)
**Problem:** Complete UI exists but no backend functionality
**Solution:** Implement backend services and database operations
**Files:** `src/features/projects/` → Need `src-tauri/src/commands/projects/`

### 4. Agents System Definition (Medium Priority)
**Problem:** Concept undefined, no implementation
**Solution:** Define agent architecture and implement basic functionality
**Files:** `src/app/pages/Agents.tsx` → Need complete implementation

### 5. Dashboard Data Integration (Low Priority)
**Problem:** Widget framework exists but limited real data integration
**Solution:** Connect widgets to actual data sources
**Files:** `src/features/dashboard/components/` → Enhance data integration

## Dependencies Overview

### Key Production Dependencies
```json
{
  "react": "^19.1.0",
  "react-dom": "^19.1.0",
  "zustand": "^5.0.5",
  "konva": "^9.3.20",
  "react-konva": "^19.0.5",
  "@tiptap/react": "^2.24.2",
  "@fullcalendar/react": "^6.1.18",
  "@dnd-kit/core": "^6.3.1",
  "@tauri-apps/api": "^2.5.0",
  "tailwindcss": "^3.4.17",
  "lucide-react": "^0.511.0",
  "date-fns": "^4.1.0",
  "immer": "^10.1.1"
}
```

### Development Dependencies
```json
{
  "vite": "^6.0.3",
  "typescript": "~5.6.2",
  "vitest": "^3.2.4",
  "@testing-library/react": "^16.3.0",
  "@ladle/react": "^5.0.3",
  "eslint": "^9.18.0",
  "chromatic": "^11.16.2"
}
```

## Security Considerations

### Data Protection
- **Local-first architecture** with SQLite encryption
- **OS keyring integration** for sensitive tokens
- **OAuth2 PKCE flow** for secure authentication
- **Encrypted database** with SQLCipher

### API Security
- **Rate limiting** for external API calls
- **Token refresh** with automatic retry
- **Secure token storage** with encryption
- **Input validation** and sanitization

## Performance Characteristics

### Canvas Performance
- **Viewport culling** for large canvases
- **React.memo optimization** for heavy components
- **Efficient store subscriptions** using useShallow
- **60+ FPS rendering** with 1000+ elements

### Gmail Performance
- **Intelligent caching** with SQLite
- **Batch operations** for efficiency
- **Rate limiting** to prevent API throttling
- **Incremental sync** for large mailboxes

### General Performance
- **Lazy loading** for large datasets
- **Debounced search** operations
- **Optimized re-renders** with Zustand
- **Efficient bundle splitting** with Vite

## Deployment and Distribution

### Desktop Application
- **Tauri bundler** for cross-platform binaries
- **Auto-updates** capability (not yet implemented)
- **Code signing** for security (configurable)
- **Installer generation** for all platforms

### Build Configurations
- **Development:** Hot reloading, debug symbols
- **Production:** Optimized bundles, minification
- **Testing:** Coverage reports, visual regression

## Future Roadmap

### Phase 1: Integration (Immediate)
1. **Connect Chat system** frontend to backend
2. **Connect Notes system** frontend to backend
3. **Implement Projects backend** services
4. **Define Agents architecture** and basic implementation

### Phase 2: Enhancement (Near-term)
1. **Ollama AI integration** for chat system
2. **Real-time collaboration** features
3. **Advanced search** across all features
4. **Mobile responsiveness** improvements

### Phase 3: Advanced Features (Long-term)
1. **Plugin system** for extensibility
2. **Advanced AI features** and automation
3. **Cloud sync** capabilities
4. **Advanced analytics** and insights

## Contributing Guidelines

### Code Quality Standards
- **TypeScript strict mode** with comprehensive typing
- **ESLint compliance** with design system rules
- **Component testing** with React Testing Library
- **Store-first testing** methodology

### Design System Compliance
- **Sentence case** for all UI text
- **Semantic tokens** only (no hardcoded values)
- **Tailwind utilities** preferred over custom CSS
- **Accessibility** standards (WCAG AA)

### Testing Requirements
- **Store-first testing** for business logic
- **Integration tests** for critical workflows
- **Component stories** for UI documentation
- **Performance tests** for critical paths

## Conclusion

LibreOllama represents a sophisticated, privacy-first productivity suite with a strong foundation in place. The **Canvas and Gmail features are production-ready**, while **Chat and Notes systems require immediate integration work** to connect existing frontend and backend implementations. The **Projects system needs backend implementation**, and **Agents system requires complete architecture definition**.

The codebase demonstrates excellent architectural patterns, comprehensive testing, and a mature design system. The primary development focus should be on **connecting existing implementations** rather than building new features from scratch.

**Key Success Factors:**
1. **Leverage existing implementations** (especially Chat and Notes backends)
2. **Maintain architectural consistency** with established patterns
3. **Follow testing methodology** with store-first approach
4. **Preserve design system standards** and accessibility
5. **Focus on integration** over new development

This overview provides the foundation for any senior developer to understand the project structure, implementation status, and development priorities for LibreOllama. 