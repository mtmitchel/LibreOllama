# LibreOllama Canvas - Comprehensive Code and Architecture Documentation
# Generated: January 2025
# Status: Production Ready - Konva.js Implementation
# Last Updated: June 2025 - Text Property Type Safety Fix Applied

================================================================================
                           EXECUTIVE SUMMARY
================================================================================

Implementation Status: ✅ PRODUCTION COMPLETE
Component: src/components/Canvas/KonvaCanvas.tsx
Route: /canvas
Framework: Konva.js + React-Konva
Migration Date: June 11, 2025
Design System Integration: June 11, 2025
Type Safety Fix: June 15, 2025

The LibreOllama canvas system has been successfully migrated from Fabric.js to 
Konva.js, resolving critical invisible objects bugs and constructor issues. The 
new implementation provides immediate element visibility, better React integration,
enhanced performance, and full design system compliance. Recent type safety fixes
ensure proper handling of optional text properties across components.

================================================================================
                           ARCHITECTURE OVERVIEW
================================================================================

## Implementation Stack
```
/canvas route
    ↓
App.tsx → KonvaApp.tsx → KonvaCanvas.tsx
    ↓
Konva.js + React-Konva + Zustand + TypeScript + Design System
```

## File Structure
```
src/
├── components/
│   ├── Canvas/
│   │   ├── KonvaCanvas.tsx           # Main canvas component (599 lines)
│   │   ├── KonvaApp.tsx              # App integration wrapper (115 lines)
│   │   ├── UnifiedTextElement.tsx    # Unified text editing component (522 lines) ✅ ACTIVE
│   │   ├── SelectableText.tsx        # Legacy rich text component (811 lines) - DEPRECATED
│   │   ├── SimpleTextElement.tsx     # Legacy simple text component (154 lines) - DEPRECATED
│   │   ├── RichTextRenderer.tsx      # Rich text rendering (142 lines)
│   │   ├── ImageElement.tsx          # Image handling component
│   │   └── ConnectableShape.tsx      # Shape component with connection points
│   └── Toolbar/
│       ├── KonvaToolbar.tsx          # Design system compliant toolbar (476 lines)
│       └── KonvaToolbar.css          # Modular CSS with design system variables
├── lib/
│   └── ConnectionManager.ts          # Dynamic shape connection system
├── stores/
│   └── konvaCanvasStore.ts           # Zustand state management (356 lines)
├── styles/
│   ├── designSystem.ts               # LibreOllama design system (159 lines)
│   ├── design-system.css             # CSS variables and global styles
│   └── konvaCanvas.css               # Canvas-specific styles
└── hooks/
    ├── useTauriCanvas.ts             # Tauri backend integration (31 lines)
    ├── usePanZoom.ts                 # Pan and zoom functionality
    └── useKeyboardShortcuts.ts       # Keyboard shortcuts

src-tauri/
└── src/commands/
    └── canvas.rs                     # Save/load canvas data
```

================================================================================
                           CORE COMPONENTS ANALYSIS
================================================================================

## 1. KonvaCanvas.tsx (Main Component - 599 lines)

### Purpose
Main canvas rendering component that handles all drawing operations, element 
rendering, and user interactions. Uses UnifiedTextElement for consistent text editing.

### Key Features
- Element rendering using React-Konva components
- Real-time drawing with pen tool
- Unified text editing system (eliminates dual window issues)
- Transform handles for selection and manipulation
- Pan/zoom integration
- Viewport culling for performance (1000+ elements)

### Core Interfaces
```typescript
interface KonvaCanvasProps {
  width: number;
  height: number;
  onElementSelect?: (element: CanvasElement) => void;
  panZoomState: PanZoomState;
  stageRef: React.RefObject<Konva.Stage | null>;
  onWheelHandler: (e: Konva.KonvaEventObject<WheelEvent>) => void;
  onTouchMoveHandler?: (e: Konva.KonvaEventObject<TouchEvent>) => void;
  onTouchEndHandler?: (e: Konva.KonvaEventObject<TouchEvent>) => void;
}

interface PanZoomState {
  scale: number;
  position: { x: number; y: number };
}
```

### Critical Implementation Details
- Uses Zustand store for state management
- Implements proper Stage/Layer hierarchy without whitespace
- Handles text editing with textarea overlay
- Supports rich text formatting with context menus
- Manages element selection with Konva Transformer
- Ensures type safety with null/undefined text handling (text: element.text || '')

## 2. KonvaApp.tsx (Integration Wrapper - 115 lines)

### Purpose
App-level integration component that provides canvas container, toolbar, and 
coordinates pan/zoom functionality.

### Key Features
- Canvas size management and responsive design
- Pan/zoom state coordination
- Keyboard shortcuts integration
- Toolbar and canvas layout

### Implementation
```typescript
const KonvaApp: React.FC = () => {
  const stageRef = useRef<Konva.Stage>(null);
  const { panZoomState, handleWheel, handleTouchMove, handleTouchEnd, 
          resetZoom, zoomToFit, zoomIn, zoomOut } = usePanZoom();
  
  useKeyboardShortcuts();
  const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 });
  const { selectedElementId, elements: canvasElements } = useKonvaCanvasStore();
  
  // Canvas size management with responsive updates
  // Toolbar and canvas rendering
}
```

## 3. KonvaToolbar.tsx (Toolbar Component - 476 lines)

### Purpose
Professional toolbar with design system compliance, providing all drawing tools
and canvas actions.

### Tools Available
```typescript
const tools = [
  { id: 'select', name: 'Select', icon: MousePointer2 },
  { id: 'pan', name: 'Pan', icon: Hand },
  { id: 'text', name: 'Text', icon: Type },
  { id: 'sticky-note', name: 'Sticky Note', icon: StickyNote },
  { id: 'rectangle', name: 'Rectangle', icon: Square },
  { id: 'circle', name: 'Circle', icon: Circle },
  { id: 'line', name: 'Line', icon: Minus },
  { id: 'arrow', name: 'Arrow', icon: ArrowRight },
  { id: 'triangle', name: 'Triangle', icon: Triangle },
  { id: 'star', name: 'Star', icon: Star },
  { id: 'pen', name: 'Pen', icon: Pen },
  { id: 'image', name: 'Image', icon: Image },
  { id: 'connect', name: 'Connect', icon: Zap }
];
```

### Key Features
- Lucide React icons for professional appearance
- Design system compliant styling
- Color picker integration
- Zoom controls (in/out/reset/fit)
- Save/load functionality
- Undo/redo operations
- Element deletion

## 4. UnifiedTextElement.tsx (Unified Text Component - 522 lines) ✅ ACTIVE

### Purpose
Unified text editing component that handles both simple and rich text editing
in a single interface, eliminating the dual window issue that occurred when
multiple text editing components were active simultaneously.

### Key Features
- Single interface for all text editing (text, sticky-note, rich-text)
- Real-time rich text formatting (bold, italic, underline, strikethrough)
- Context menu with formatting options
- Font size adjustment and color picker
- Visual feedback for active formatting states
- Textarea overlay for direct text editing
- Automatic width/height calculation for text elements

### Unified Text Implementation
```typescript
interface UnifiedTextElementProps {
  element: {
    id: string;
    x: number;
    y: number;
    text: string;
    width?: number;
    height?: number;
    fontSize?: number;
    fontFamily?: string;
    fill?: string;
    type: 'text' | 'sticky-note';
    backgroundColor?: string;
    textColor?: string;
    stroke?: string;
    strokeWidth?: number;
  };
  isSelected: boolean;
  onUpdate: (elementId: string, updates: any) => void;
  onSelect: (elementId: string) => void;
  konvaProps?: any;
}
```

### Critical Fix: Dual Window Issue Resolution
The UnifiedTextElement resolves the "Text Editing Double Window Issue" by:
- Providing a single text editing interface for all text types
- Eliminating conflicts between SimpleTextElement and SelectableText
- Ensuring consistent user experience across text, sticky-note, and rich-text elements
- Using React portals for proper DOM overlay management

## 5. SelectableText.tsx (Legacy Rich Text Component - 811 lines) - DEPRECATED

### Status: DEPRECATED
⚠️ This component is no longer used in the main canvas implementation.
It has been replaced by UnifiedTextElement to resolve dual window issues.

### Legacy Purpose
Advanced text editing component with rich formatting capabilities including
bold, italic, underline, and context menu support.

### Legacy Features
- Real-time rich text formatting
- Context menu with formatting options
- Selection-based formatting
- Visual feedback for active states
- Toggle functionality for formatting
- Persistent context menu during editing

### Legacy Implementation
```typescript
interface SelectableTextProps {
  element: {
    id: string;
    type?: 'text' | 'rich-text';
    x: number;
    y: number;
    text?: string;
    fontSize?: number;
    fontFamily?: string;
    fill?: string;
    width?: number;
    height?: number;
    segments?: RichTextSegment[];
  };
  isEditing: boolean;
  onTextUpdate: (elementId: string, newText: string) => void;
  onEditingCancel: () => void;
  onDblClick: () => void;
  onFormatChange?: (elementId: string, format: any, selection: { start: number; end: number }) => void;
}
```

================================================================================
                           STATE MANAGEMENT
================================================================================

## Zustand Store (konvaCanvasStore.ts - 356 lines)

### Core State Interface
```typescript
interface CanvasState {
  elements: Record<string, CanvasElement>;
  selectedTool: string;
  selectedElementId: string | null;
  editingTextId: string | null;
  canvasSize: { width: number; height: number };
  
  // History management
  history: HistoryState[];
  historyIndex: number;
  maxHistorySize: number;
  
  // Actions
  setSelectedTool: (tool: string) => void;
  setSelectedElement: (elementId: string | null) => void;
  addElement: (element: CanvasElement) => void;
  updateElement: (elementId: string, updates: Partial<CanvasElement>) => void;
  deleteElement: (elementId: string) => void;
  clearCanvas: () => void;
  
  // Rich text actions
  applyTextFormat: (elementId: string, format: Partial<RichTextSegment>, selection: { start: number; end: number }) => void;
  updateElementText: (elementId: string, newText: string) => void;
  setEditingTextId: (elementId: string | null) => void;
  
  // History actions
  undo: () => void;
  redo: () => void;
  canUndo: boolean;
  canRedo: boolean;
  
  // Import/Export
  exportCanvas: () => CanvasElement[];
  importCanvas: (elements: CanvasElement[]) => void;
}
```

### Element Types
```typescript
export interface CanvasElement {
  id: string;
  type: 'text' | 'rectangle' | 'circle' | 'line' | 'arrow' | 'pen' | 'triangle' | 'star' | 'sticky-note' | 'rich-text' | 'image';
  x: number;
  y: number;
  width?: number;
  height?: number;
  radius?: number;
  innerRadius?: number;
  numPoints?: number;
  text?: string;
  fill?: string;
  stroke?: string;
  strokeWidth?: number;
  points?: number[];
  sides?: number;
  backgroundColor?: string;
  textColor?: string;
  fontSize?: number;
  fontFamily?: string;
  segments?: RichTextSegment[];
  imageUrl?: string;
  arrowStart?: boolean;
  arrowEnd?: boolean;
  color?: string;
}

export interface RichTextSegment {
  text: string;
  fontSize?: number;
  fontFamily?: string;
  fontStyle?: string; // 'normal', 'italic'
  fontWeight?: string; // 'normal', 'bold'
  textDecoration?: string; // 'underline', 'line-through', ''
  fill?: string;
  url?: string;
}
```

### Key Store Features
- Immer middleware for immutable updates
- History management with undo/redo
- Rich text segment merging and optimization
- Element creation with immediate visibility
- Export/import functionality for persistence

================================================================================
                           DESIGN SYSTEM INTEGRATION
================================================================================

## Design System (designSystem.ts - 159 lines)

### Color Palette
```typescript
export const designSystem = {
  colors: {
    primary: {
      50: '#EFF6FF', 100: '#DBEAFE', 200: '#BFDBFE',
      300: '#93C5FD', 400: '#60A5FA', 500: '#3B82F6',
      600: '#2563EB', 700: '#1D4ED8', 800: '#1E40AF', 900: '#1E3A8A'
    },
    secondary: {
      50: '#F8FAFC', 100: '#F1F5F9', 200: '#E2E8F0',
      300: '#CBD5E1', 400: '#94A3B8', 500: '#64748B',
      600: '#475569', 700: '#334155', 800: '#1E293B', 900: '#0F172A'
    },
    stickyNote: {
      yellow: '#FFEB3B', yellowBorder: '#FBC02D',
      green: '#C8E6C9', greenBorder: '#4CAF50',
      blue: '#BBDEFB', blueBorder: '#2196F3',
      purple: '#E1BEE7', purpleBorder: '#9C27B0',
      orange: '#FFE0B2', orangeBorder: '#FF9800'
    }
  },
  
  shadows: {
    sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
    base: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
    stickyNote: '0 4px 8px rgba(0, 0, 0, 0.15), 0 2px 4px rgba(0, 0, 0, 0.1)'
  },
  
  typography: {
    fontSize: { xs: 12, sm: 14, base: 16, lg: 18, xl: 20, xxl: 24 },
    fontWeight: { normal: 400, medium: 500, semibold: 600, bold: 700 },
    fontFamily: {
      sans: 'Inter, system-ui, sans-serif',
      mono: 'JetBrains Mono, Consolas, monospace'
    }
  }
};
```

### Styling Integration
- All components use design system variables
- CSS custom properties for consistent theming
- Professional color schemes and typography
- Responsive design patterns
- Accessibility-compliant contrast ratios

================================================================================
                           BACKEND INTEGRATION
================================================================================

## Tauri Integration (useTauriCanvas.ts - 31 lines)

### Save/Load Functionality
```typescript
export const useTauriCanvas = () => {
  const { exportCanvas, importCanvas } = useKonvaCanvasStore();

  const saveToFile = async (filename: string) => {
    try {
      const elements = exportCanvas();
      const data = JSON.stringify(elements);
      await invoke('save_canvas_data', { data, filename });
      console.log('Canvas saved successfully');
    } catch (error) {
      console.error('Error saving canvas:', error);
    }
  };

  const loadFromFile = async (filename: string) => {
    try {
      const data = await invoke('load_canvas_data', { filename });
      const elements = JSON.parse(data as string);
      importCanvas(elements);
      console.log('Canvas loaded successfully');
    } catch (error) {
      console.error('Error loading canvas:', error);
    }
  };

  return { saveToFile, loadFromFile };
};
```

### Rust Backend Commands
- save_canvas_data: Persists canvas data to file system
- load_canvas_data: Retrieves canvas data from file system
- JSON-based serialization for cross-platform compatibility

================================================================================
                           MIGRATION HISTORY
================================================================================

## From Fabric.js to Konva.js (June 2025)

### Critical Issues Resolved

1. **Text Editing Double Window Issue** ✅ FIXED (January 2025)
   - Problem: Multiple text editing interfaces were active simultaneously, causing:
     - Dual text editing windows appearing when editing text elements
     - Conflicts between SimpleTextElement and SelectableText components
     - Inconsistent user experience across different text types
     - RichTextRenderer using SelectableText while KonvaCanvas used SimpleTextElement
   - Root Cause: 
     - `RichTextRenderer.tsx` imported and used `SelectableText.tsx`
     - `KonvaCanvas.tsx` used `SimpleTextElement.tsx` for text and sticky-note elements
     - Both components had independent text editing mechanisms
   - Solution: 
     - Created `UnifiedTextElement.tsx` as single text editing interface
     - Updated `RichTextRenderer.tsx` to use `UnifiedTextElement` instead of `SelectableText`
     - Updated `KonvaCanvas.tsx` to use `UnifiedTextElement` for all text types
     - Deprecated `SelectableText.tsx` and `SimpleTextElement.tsx`
   - Impact: 
     - Single, consistent text editing experience
     - Eliminated dual window conflicts
     - Unified formatting capabilities across all text elements
     - Improved user experience and code maintainability

2. **React-Konva Text Components Error**
   - Problem: "Text components are not supported for now in ReactKonva"
   - Root Cause: Whitespace between JSX tags in React-Konva components
   - Solution: Removed ALL whitespace between Konva JSX elements

3. **Layer Container Error**
   - Problem: "TypeError: Cannot read properties of undefined (reading 'getParent')"
   - Root Cause: Improper Stage/Layer hierarchy
   - Solution: Ensured proper Stage/Layer structure without whitespace

4. **Store Integration Issues**
   - Problem: Only pen/drawing tool working due to local state usage
   - Root Cause: Component not properly connected to Zustand store
   - Solution: Connected KonvaCanvas to store for all element operations

5. **Tool State Synchronization**
   - Problem: Selected tool not synchronized between toolbar and canvas
   - Root Cause: Props vs store state mismatch
   - Solution: Canvas now reads directly from store

6. **Text Property Type Safety** ✅ FIXED (June 2025)
   - Problem: Type mismatch between CanvasElement and UnifiedTextElementProps interfaces
   - Root Cause: 
     - In CanvasElement interface, text property is optional (text?: string)
     - In UnifiedTextElementProps interface, text property is required (text: string)
     - This caused TypeScript errors when passing elements to UnifiedTextElement
   - Solution: 
     - Added null/undefined handling in KonvaCanvas.tsx with default empty string
     - Used object spread with explicit text property: `text: element.text || ''`
     - Applied fix to both text and sticky-note element rendering
   - Impact: 
     - Eliminated TypeScript errors
     - Improved type safety across component boundaries
     - Ensured consistent text handling for all text-based elements

### Migration Benefits Achieved
- ✅ Immediate Element Visibility: No more invisible objects bug
- ✅ Reliable Element Creation: No constructor issues
- ✅ Perfect React Integration: Native React-Konva components
- ✅ Enhanced Performance: Viewport culling for 1000+ elements
- ✅ Better State Management: Reliable Zustand store with immer
- ✅ Professional Design: Comprehensive design system with animations

================================================================================
                           RECENT ENHANCEMENTS (JUNE 2025)
================================================================================

## Rich Text Formatting System
- Real-time bold, italic, underline formatting
- Context menu with visual feedback
- Active state indicators for formatting buttons
- Toggle functionality for formatting options
- Persistent context menu during editing
- Selection-based formatting application

## Enhanced User Experience
- Immediate element creation on toolbar click
- Streamlined workflow (no canvas click required)
- Smart tool differentiation (Select/Connect maintain click-to-use)
- Improved element dragging with Select/Pan tools
- Text editing independent of selected tool
- Instant tool switching (removed setTimeout delays)

## Design System Compliance
- Complete CSS variables migration
- Professional toolbar with flat design
- Lucide React icons replacing emoji-based icons
- Responsive design with proper breakpoints
- Accessibility improvements (focus states, contrast ratios)
- Modular CSS architecture with BEM-style naming

## Performance Optimizations
- Viewport culling for large element counts
- Efficient rich text segment merging
- Optimized re-rendering with React-Konva
- Memory management for drawing operations

## Type Safety Improvements
- Fixed text property type mismatch between interfaces
- Added null/undefined handling for optional properties
- Improved TypeScript compliance across components
- Enhanced error prevention with proper type checking
- Consistent property handling for all element types

================================================================================
                           FEATURE IMPLEMENTATION STATUS
================================================================================

## Drawing Tools (13 Total) - ✅ COMPLETE
| Tool | Status | Description |
|------|--------|-------------|
| Text | ✅ Complete | Click to add, double-click to edit with rich formatting |
| Rich Text | ✅ Complete | Bold, italic, underline with context menu |
| Sticky Notes | ✅ Complete | Colored sticky notes with Group-based rendering |
| Rectangle | ✅ Complete | Rounded corners, custom fill/stroke |
| Circle | ✅ Complete | Perfect circles with customizable styling |
| Triangle | ✅ Complete | Geometric triangles with proper proportions |
| Star | ✅ Complete | Multi-pointed stars with configurable rays |
| Line | ✅ Complete | Straight lines with stroke customization |
| Arrow | ✅ Complete | Directional arrows with arrowheads |
| Pen | ✅ Complete | Freehand drawing with smooth strokes |
| Image | ✅ Complete | Image upload and positioning |
| Connect | ✅ Complete | Dynamic shape connections with bezier curves |
| Select/Pan | ✅ Complete | Element selection and canvas navigation |

## Professional Features - ✅ COMPLETE
- Selection & Transform: Native Konva selection with transform handles
- Rich Text Editor: Context menu with formatting options
- Real-time Feedback: Visual indicators for active states
- Delete Operations: Remove objects (Delete/Backspace keys)
- Keyboard Shortcuts: Delete, Escape key support
- Responsive Design: Adaptive canvas sizing
- Save/Load: JSON-based persistence with Tauri backend
- Design System: Professional styling with CSS variables
- Connection Management: Smart connection detection and validation

## Canvas Controls - ✅ COMPLETE
- Pan/Zoom: Mouse wheel and touch support
- Zoom Controls: In/Out/Reset/Fit buttons
- History: Undo/Redo with 50-step history
- Export/Import: JSON-based canvas data exchange
- Debug Mode: Comprehensive logging for troubleshooting

================================================================================
                           TECHNICAL SPECIFICATIONS
================================================================================

## Dependencies
- konva: ^9.2.0 (Core canvas library)
- react-konva: ^18.2.10 (React wrapper for Konva.js)
- zustand: State management with immer middleware
- lucide-react: Professional icon system
- tailwindcss: Utility-first CSS with design system variables
- @tauri-apps/api: Desktop app integration

## Performance Metrics
- Supports 1000+ elements with viewport culling
- Real-time rendering at 60fps
- Memory-efficient rich text segment management
- Optimized re-rendering with React-Konva
- Smooth pan/zoom operations

## Browser Compatibility
- Modern browsers with Canvas API support
- Touch device support for mobile/tablet
- Keyboard navigation and shortcuts
- Accessibility compliance (WCAG 2.1)

## File Size Analysis
- KonvaCanvas.tsx: 657 lines (main component)
- SelectableText.tsx: 811 lines (rich text editing)
- KonvaToolbar.tsx: 476 lines (toolbar component)
- konvaCanvasStore.ts: 356 lines (state management)
- Total core canvas code: ~2,300 lines

================================================================================
                           DEVELOPMENT GUIDELINES
================================================================================

## Code Standards
- TypeScript for type safety
- React 19 with modern hooks
- Functional components with proper prop typing
- Zustand for predictable state management
- Design system compliance for all styling

## Testing Approach
- Component-level testing with React Testing Library
- Integration testing for canvas operations
- Performance testing for large element counts
- Cross-browser compatibility testing
- Accessibility testing with screen readers

## Debugging Tools
- Comprehensive console logging
- Element count and performance metrics
- Store state inspection
- Canvas operation tracing
- Error boundary implementation

## Extension Points
- Add new tools by extending tools array in KonvaToolbar
- Custom shapes via Konva.js shape creation
- Styling modifications through designSystem.ts
- New features through Zustand store actions
- Backend integration via useTauriCanvas hook

================================================================================
                           CONCLUSION
================================================================================

The LibreOllama Canvas implementation represents a complete, production-ready
whiteboard solution built on modern web technologies. The migration from 
Fabric.js to Konva.js has resolved all critical issues while delivering 
enhanced functionality, better performance, and professional design.

Key achievements:
- ✅ 13 drawing tools with rich functionality
- ✅ Professional rich text editing system
- ✅ Design system compliance and accessibility
- ✅ Robust state management with history
- ✅ Desktop integration via Tauri
- ✅ Performance optimization for large canvases
- ✅ Comprehensive documentation and testing

The codebase is well-structured, maintainable, and ready for future 
enhancements. All components follow React best practices and TypeScript 
standards, ensuring long-term sustainability and developer productivity.

================================================================================
                           END OF DOCUMENTATION
================================================================================