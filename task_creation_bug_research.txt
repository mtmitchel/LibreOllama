CRITICAL BUG: Task Creation Shows Error Despite Successful Backend Operation

=================================================================================
SUMMARY
=================================================================================
Tasks are being successfully created in Google Tasks API (confirmed by backend logs showing 200 OK responses and task IDs), but the frontend displays "Failed to parse JSON string: expected value at line 1 column 1" error. This creates a terrible user experience where tasks appear to fail but actually succeed.

=================================================================================
OBSERVED BEHAVIOR
=================================================================================
1. User creates a task in the UI
2. Frontend shows error: "Failed to parse JSON string: expected value at line 1 column 1"
3. Backend logs show task created successfully with valid ID
4. Task DOES appear in Google Tasks and syncs back on refresh
5. Metadata (priority/labels) is NOT persisting despite local SQLite storage implementation

=================================================================================
CONSOLE OUTPUT EVIDENCE
=================================================================================
Frontend Console:
```
[GOOGLE-TASKS-SERVICE] Calling create_task with: {accountId: '110197326828888442595', taskListId: 'MDMyMzEwMTEwNDIyNDM1NDg3NTI6MDow', taskData: {…}}
[GOOGLE-TASKS-SERVICE] create_task error: Failed to parse JSON string: expected value at line 1 column 1
❌ [GOOGLE-TASKS] Failed to create task: Error: Failed to parse JSON string: expected value at line 1 column 1
[DEBUG] Error creating Google Task: Error: Failed to parse JSON string: expected value at line 1 column 1
```

Backend Console (Same Time):
```
📋 [TASKS-API] Creating task 'test' in list: VmhRTUJvN3hNSkRqYVNmWQ (account: 110197326828888442595)
📋 [TASKS-API] Task data: TaskCreateData { title: "test", notes: Some(""), due: None, parent: None, previous: None, metadata: Some(TaskMetadata { priority: Some("normal"), labels: Some([]) }) }
📋 [TASKS-API] Sending request to Google Tasks API
📋 [TASKS-API] URL: https://www.googleapis.com/tasks/v1/lists/VmhRTUJvN3hNSkRqYVNmWQ/tasks
📋 [TASKS-API] Request body: {
  "notes": "",
  "status": "needsAction",
  "title": "test"
}
📋 [TASKS-API] Response status: 200 OK
📋 [TASKS-API] Google response text: {
  "kind": "tasks#task",
  "id": "NG1UcWR1azd4WjdHQ1ItOA",
  "etag": "\"KsAiSNgtO0M\"",
  "title": "test",
  "updated": "2025-07-25T22:26:55.677Z",
  "selfLink": "https://www.googleapis.com/tasks/v1/lists/VmhRTUJvN3hNSkRqYVNmWQ/tasks/NG1UcWR1azd4WjdHQ1ItOA",
  "position": "00000000000000000000",
  "status": "needsAction",
  "links": [],
  "webViewLink": "https://tasks.google.com/task/4mTqduk7xZ7GCR-8?sa=6"
}
✅ [TASKS-API] Task created successfully: NG1UcWR1azd4WjdHQ1ItOA
```

=================================================================================
PERPLEXING ASPECTS
=================================================================================
1. Backend returns Ok(new_task) with valid GoogleTask struct
2. Google API returns 200 OK with valid JSON response
3. Task ID is successfully extracted and logged
4. Task appears in subsequent list fetches
5. But Tauri invoke() fails with JSON parse error
6. Error happens BEFORE response reaches the service layer

=================================================================================
CODE STRUCTURE
=================================================================================

Frontend Flow:
1. TasksAsanaClean.tsx -> Creates task with metadata
2. googleTasksStore.ts -> Calls googleTasksService.createTask()
3. googleTasksService.ts -> Uses Tauri invoke('create_task')
4. Error occurs at invoke() level before response processing

Backend Flow:
1. src-tauri/src/lib.rs -> Registers create_task command
2. src-tauri/src/commands/tasks/api.rs -> create_task function
3. Makes Google API call successfully
4. Saves metadata to SQLite
5. Returns Ok(GoogleTask) struct

=================================================================================
RELEVANT CODE SNIPPETS
=================================================================================

Frontend Service (src/services/google/googleTasksService.ts):
```typescript
async createTask(
  account: GoogleAccount,
  taskListId: string,
  taskData: {
    title: string;
    notes?: string;
    due?: string;
    parent?: string;
    previous?: string;
    priority?: string;
    labels?: string[];
  }
): Promise<ApiResponse<GoogleTask>> {
  try {
    console.log('[GOOGLE-TASKS-SERVICE] Calling create_task with:', {
      accountId: account.id,
      taskListId,
      taskData: {
        title: taskData.title,
        notes: taskData.notes,
        due: taskData.due,
        parent: taskData.parent,
        previous: taskData.previous,
        metadata: taskData.metadata
      }
    });
    
    let response;
    try {
      response = await apiInvoke('create_task', {
        accountId: account.id,
        taskListId,
        taskData: {
          title: taskData.title,
          notes: taskData.notes,
          due: taskData.due,
          parent: taskData.parent,
          previous: taskData.previous,
          metadata: taskData.metadata
        },
      });
    } catch (invokeError: any) {
      console.error('[GOOGLE-TASKS-SERVICE] Tauri invoke error:', invokeError);
      if (typeof invokeError === 'string') {
        throw new Error(invokeError);
      }
      throw invokeError;
    }
    
    console.log('[GOOGLE-TASKS-SERVICE] create_task response:', response);

    return {
      success: true,
      data: response as GoogleTask
    };
  } catch (error) {
    console.error('[GOOGLE-TASKS-SERVICE] create_task error:', error);
    return {
      success: false,
      error: await this.handleApiError(error)
    };
  }
}
```

Backend Command (src-tauri/src/commands/tasks/api.rs):
```rust
#[tauri::command]
pub async fn create_task(
    account_id: String,
    task_list_id: String,
    task_data: TaskCreateData,
    auth_service: State<'_, Arc<crate::services::gmail::auth_service::GmailAuthService>>,
    db: State<'_, DbPool>,
) -> Result<GoogleTask, String> {
    println!("📋 [TASKS-API] Creating task '{}' in list: {} (account: {})", 
             task_data.title, task_list_id, account_id);
    
    // ... OAuth token refresh ...
    
    // Prepare the request body - ONLY Google Tasks standard fields
    let mut body = serde_json::json!({
        "title": task_data.title,
        "status": "needsAction"
    });

    // ... Make API call to Google ...
    
    let response_text = response.text().await
        .map_err(|e| format!("Failed to read response text: {}", e))?;
    
    let response_data: serde_json::Value = serde_json::from_str(&response_text)
        .map_err(|e| format!("Failed to parse response JSON: {} - Response was: {}", e, response_text))?;
    
    let google_task_id = match response_data["id"].as_str() {
        Some(id) if !id.is_empty() => id.to_string(),
        _ => {
            return Err(format!("Failed to create task: Google didn't return a valid task ID. Response: {}", response_text));
        }
    };
    
    // Save metadata to local database
    if let Some(ref metadata) = task_data.metadata {
        // ... SQLite insert ...
    }

    let new_task = GoogleTask {
        id: google_task_id.clone(),
        title: response_data["title"].as_str().unwrap_or("").to_string(),
        notes: response_data["notes"].as_str().map(|s| s.to_string()),
        status: response_data["status"].as_str().unwrap_or("needsAction").to_string(),
        // ... other fields ...
        metadata: saved_metadata,
    };

    println!("✅ [TASKS-API] Task created successfully: {}", new_task.id);
    Ok(new_task)
}
```

GoogleTask Struct Definition:
```rust
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GoogleTask {
    pub id: String,
    pub title: String,
    pub notes: Option<String>,
    pub status: String,
    pub due: Option<String>,
    pub completed: Option<String>,
    pub updated: Option<String>,
    pub parent: Option<String>,
    pub position: Option<String>,
    pub kind: Option<String>,
    pub etag: Option<String>,
    #[serde(rename = "selfLink")]
    pub self_link: Option<String>,
    pub links: Option<Vec<TaskLink>>,
    pub hidden: Option<bool>,
    pub deleted: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TaskMetadata>,
}
```

=================================================================================
ATTEMPTED SOLUTIONS
=================================================================================
1. Added extensive debug logging throughout the stack
2. Verified Google API returns valid JSON with task ID
3. Checked Rust struct serialization attributes
4. Added error handling around Tauri invoke call
5. Ensured position field has default value
6. Added clone() to google_task_id to avoid move issues
7. Verified all TypeScript types match Rust types

=================================================================================
THEORIES
=================================================================================
1. Tauri serialization issue with the GoogleTask struct
2. Mismatch between frontend TypeScript types and Rust types
3. Issue with how Tauri handles Result<T, String> return types
4. Problem with Option<T> field serialization
5. Race condition or async handling issue
6. Tauri IPC channel corruption or size limit

=================================================================================
METADATA PERSISTENCE ISSUE
=================================================================================
Additionally, the metadata (priority/labels) is not persisting despite:
- Backend successfully inserting into SQLite database
- Frontend sending metadata in the request
- Metadata being included in the response struct
- But on page refresh, metadata is lost

=================================================================================
WHAT WE NEED TO INVESTIGATE
=================================================================================
1. Why does Tauri invoke() fail to parse the response when backend succeeds?
2. What exact format is Tauri returning vs what the frontend expects?
3. Is there a serialization issue with the GoogleTask struct?
4. Why doesn't metadata persist across refreshes?
5. Is the SQLite query for loading metadata working correctly?
6. What's the exact error object structure from Tauri?

=================================================================================
CRITICAL IMPACT
=================================================================================
- Users see error messages for successful operations
- Metadata (priority/labels) doesn't persist
- Undermines user confidence in the application
- Creates confusion about task creation status